package dk.tbsalling.aismessages.ais.messages;

import dk.tbsalling.aismessages.ais.messages.types.AISMessageType;
import dk.tbsalling.aismessages.ais.messages.types.MMSI;
import dk.tbsalling.aismessages.nmea.messages.NMEAMessage;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class BinaryMessageMultipleSlotTest {

    @Test
    public void canDecode() {
        // Arrange
        NMEAMessage nmeaMessage1 = new NMEAMessage("!AIVDM,2,1,4,A,J6SUcDh0000000000000000000000000000000000000000000000000000,0*24");
        NMEAMessage nmeaMessage2 = new NMEAMessage("!AIVDM,2,2,4,A,00000000000,2*20");

        // Act
        AISMessage aisMessage = dk.tbsalling.aismessages.ais.messages.AISMessageFactory.create(null, null, null, nmeaMessage1, nmeaMessage2);

        System.out.println(aisMessage.toString());

        // Assert
        assertEquals(AISMessageType.BinaryMessageMultipleSlot, aisMessage.getMessageType());
        BinaryMessageMultipleSlot message = (BinaryMessageMultipleSlot) aisMessage;
        assertEquals(0, message.getRepeatIndicator());
        assertEquals(new MMSI(439970643), message.getSourceMmsi());
        assertFalse(message.isAddressed());
        assertFalse(message.isStructured());
        assertEquals(new MMSI(0), message.getDestinationMmsi());
        assertEquals(0, message.getApplicationId());
        assertEqualsmessage.getData());
    }

    @Test
    public void canDecodeAlternative() {
        // Arrange
        NMEAMessage nmeaMessage1 = new NMEAMessage("!AIVDM,2,1,1,A,J5NJP<82<mN1<tn4GfOl1lTp8h6000000000000000000000000000000000,0*18");
        NMEAMessage nmeaMessage2 = new NMEAMessage("!AIVDM,2,2,1,A,00000000000,2*25");

        // Act
        AISMessage aisMessage = dk.tbsalling.aismessages.ais.messages.AISMessageFactory.create(null, null, null, nmeaMessage1, nmeaMessage2);

        System.out.println(aisMessage.toString());

        // Assert
        assertEquals(AISMessageType.BinaryMessageMultipleSlot, aisMessage.getMessageType());
        BinaryMessageMultipleSlot message = (BinaryMessageMultipleSlot) aisMessage;
        assertEquals(0, message.getRepeatIndicator());
        assertEquals(new MMSI(367435824), message.getSourceMmsi());
        assertTrue(message.isAddressed());
        assertFalse(message.isStructured());
        assertEquals(new MMSI(9229792), message.getDestinationMmsi());
        assertEquals(19699, message.getApplicationId());
        assertEqualsmessage.getData());
    }
}
